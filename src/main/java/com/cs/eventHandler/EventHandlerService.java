/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.cs.eventHandler;

import java.sql.SQLException;
import java.util.ArrayList;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.cs.EventDao.EventDao;
import com.cs.EventDao.EventDaoImpl;
import com.cs.model.Event;
import com.cs.model.EventLog;
import com.cs.utils.EventFailureException;
import com.cs.utils.EventUtility;

public class EventHandlerService {

	private static final Logger LOGGER = LogManager.getLogger(EventHandlerService.class);

	EventDaoImpl eventDao = new EventDao();

	/*
	 * This method process the Event list. It calculates the duration of event from
	 * the file and calls DB for persisting data.
	 */
	
	public List<EventLog> getLogDetails(List<Event> eventList) throws SQLException, EventFailureException {
		List<EventLog> logList = new ArrayList<EventLog>();
		try {
			int i = 0;
			while (i < eventList.size() && eventList.size() > 2) {
				Event event1 = eventList.get(i);
				Event event2 = eventList.get(i + 1);
				if (event1.getId().equalsIgnoreCase(event2.getId())) {
					long duration=EventUtility.calculateDuration(event1.getTimestamp(),event2.getTimestamp());
					
					EventLog logDetail = new EventLog();
					logDetail.setId(event1.getId());
					logDetail.setHost(event1.getHost());
					logDetail.setType(event1.getType());
					logDetail.setDuration(duration);
					if(duration>4) {
						logDetail.setAlert(true);
					}else
						logDetail.setAlert(false);				
					LOGGER.info(" Entry details for Id :" + event1.getId() + " Duration: " + duration +
							" Host: "+ event1.getHost() + " Type: " + event1.getType() + " Alert: " + logDetail.getAlert());
					
					logList.add(logDetail);
      				i = i + 2;
					
				} else {
					LOGGER.info("1 Entry is missing for id:" + event1.getId());
					i = i + 1;
				}

			}
			LOGGER.info("Calling DB to insert data ");
			if (logList != null && logList.size() > 0) {
				eventDao.createTable();
				Integer dataLength = eventDao.insertEvent(logList);
				if (dataLength != 0 && logList != null && dataLength == logList.size()) {
					LOGGER.info("Number of rows inserted in DB"+dataLength);
				}
			}
		} catch (SQLException e) {
			LOGGER.info("Error in getLogDetails() methos: ",e);
			throw new SQLException();
		} catch (Exception ex) {
			LOGGER.info("Error in getLogDetails() methos: ");
			throw new EventFailureException(ex.getMessage());
		}
		return logList;

	}

}
